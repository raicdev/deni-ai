// middleware.ts (Recommended approach)
import { NextRequest, NextResponse } from "next/server";
import { CookieOptions, createServerClient } from "@supabase/ssr";
import createNextIntlMiddleware from "next-intl/middleware";
import { routing } from "./i18n/routing"; // Ensure this path is correct

const intlMiddleware = createNextIntlMiddleware(routing);

export default async function middleware(
  request: NextRequest
): Promise<NextResponse> {
  // Early return for API routes - skip intl middleware for API endpoints
  if (request.nextUrl.pathname.startsWith("/api/")) {
    return NextResponse.next();
  }

  // 1. Execute next-intl middleware to perform internationalization processing.
  //    This determines the locale, sets request.nextUrl.locale,
  //    or performs rewrites/redirects as necessary.
  let response = intlMiddleware(request);
  // Here, you can use response.nextUrl.locale to get the current locale.
  // However, this is only valid for NextResponse.next(). If it's a redirect, execution stops here.

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll();
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value)
          );
          response = NextResponse.next({
            request,
          });
          cookiesToSet.forEach(({ name, value, options }) =>
            response.cookies.set(name, value, options)
          );
        },
      },
    }
  );

  // After change
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();

  if (error) {
    console.error("Supabase getSession error:", error);
  }
  const loggedIn = !!user;

  // Since the locale prefix has already been processed by next-intl,
  // request.nextUrl.pathname will be the URL including the locale prefix.
  // If necessary, perform conditional branching on the path without the locale prefix.
  // Example: /en/home -> /home
  const pathnameWithoutParameters = request.nextUrl.pathname.replace(
    /\?.*$/,
    ""
  ); // Remove parameters
  const locale = pathnameWithoutParameters.split("/")[1];

  console.log(
    request.nextUrl.pathname,
    "loggedIn:",
    loggedIn,
    "locale:",
    locale
  );

  const pathnameWithoutLocale = request.nextUrl.pathname.replace(
    `/${locale}`,
    ""
  );
  // Adjustment for root path: /en -> ""
  let adjustedPathname = pathnameWithoutLocale.replace(/\?.*$/, ""); // Delete ? parameter
  if (adjustedPathname === "") {
    adjustedPathname = "/";
  }

  console.log("adjustedPathname:", adjustedPathname);

  if (loggedIn) {
    // If logged in
    if (adjustedPathname === "/") {
      // Access to / displays the content of /chat/home (URL remains /)
      // Rewrite based on the response generated by next-intl
      const rewriteUrl = request.nextUrl.clone();
      rewriteUrl.pathname = `/${locale || "en"}/chat/home`; // Rewrite to /chat/home
      response = NextResponse.rewrite(rewriteUrl); // Directly manipulate the `response` object
    } else if (adjustedPathname === "/home") {
      const rewriteUrl = request.nextUrl.clone();
      rewriteUrl.pathname = `/`;
      response = NextResponse.rewrite(rewriteUrl);
    }
  } else {
    // If not logged in
    if (adjustedPathname === "/") {
      // Access to / is allowed as is (Display Hero)
      // Return the response generated by next-intl as is
    } else if (
      adjustedPathname === "/home" ||
      adjustedPathname.startsWith("/dashboard")
    ) {
      // Access to /home or /dashboard redirects to / (Hero)
      // Redirect based on the response generated by next-intl
      return NextResponse.redirect(new URL(`/${locale}/login`, request.url)); // Return a new NextResponse, hence `return`
    }
  }

  // Finally, return the response obtained from intlMiddleware (or the modified response)
  return response;
}

export const config = {
  // According to next-intl documentation, match all paths including locale prefixes
  // The last '.*' in the matcher matches any path
  matcher: [
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ], // Example: ['/', '/(ja|en)/dashboard/:path*', '/(ja|en)/home/:path*']
};

